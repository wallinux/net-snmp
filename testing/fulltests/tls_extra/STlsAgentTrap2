#!/bin/sh

. STlsVars

openssl_ipv6_supported () {
    openssl version | cut -d' ' -f2 | grep "1.1." > /dev/null
    if [ $? = 0 ]; then
	TLS_IPv6=yes
    else
	TLS_IPv6=no
    fi
    echo $TLS_IPv6
}

[ "$xIPv" = "x" ] && IPv=4
[ "x$SNMP_TRANSPORT_SPEC" = "x"      ] && SNMP_TRANSPORT_SPEC=tlstcp

SKIPIFNOT USING_EXAMPLES_EXAMPLE_MODULE
[ "$SNMP_TRANSPORT_SPEC" = "tlstcp"  ] && SKIPIFNOT NETSNMP_TRANSPORT_TLSTCP_DOMAIN
[ "$SNMP_TRANSPORT_SPEC" = "tlstcp"  ] && [ "$IPv" = "6"  ] && SKIPIFNOT NETSNMP_TRANSPORT_TCPIPV6_DOMAIN
[ "$SNMP_TRANSPORT_SPEC" = "tlstcp"  ] && [ "$IPv" = "6"  ] && [ `openssl_ipv6_supported` = "no" ] && SKIP "TLS IPv6 not supported by openssl"

[ "$SNMP_TRANSPORT_SPEC" = "dtlsudp" ] && SKIPIFNOT NETSNMP_TRANSPORT_DTLSUDP_DOMAIN
[ "$SNMP_TRANSPORT_SPEC" = "dtlsudp" ] && [ "$IPv" = "6"  ] && SKIPIFNOT NETSNMP_TRANSPORT_UDPIPV6_DOMAIN

[ "$IPv" = "6" ] && SNMP_TEST_DEST=[::1]:
[ "x$NO_OF_TRAPS" = "x" ] && NO_OF_TRAPS=1
[ "x$INFORM" = "x" ] && INFORM=yes
[ "x$TRAP" = "x" ] && TRAP=no
[ "x$INFORM_DEFAULT" = "x" ] && INFORM_DEFAULT=no
[ "x$TRAP_DEFAULT" = "x" ] && TRAP_DEFAULT=no

[ "$CERT_PREFIX" != "" ] && DEFAULT=no
[ "$TLSTYPE" = "trust" ] && USE_CA=yes

# produce the certificates to use
CA="ca-net-snmp.org"
HOSTNAME=`hostname`
HOSTNAME_SHORT=`hostname -s`

# CA certificate
createca () {
    CAPTURE $NSCERT genca --cn $CA  $NSCERTARGS
    CAFP=`$NSCERT showcas --fingerprint --brief ca-net-snmp.org $NSCERTARGS`
    CHECKVALUEISNT "$CAFP" "" "generated fingerprint for ca-net-snmp.org certificate"
}

createcerts () {
    NSCERTARGS="--san DNS:$HOSTNAME $NSCERTARGS"
    [ "$USE_CA" = "yes" ] && ca="--with-ca $CA"

    # snmptrapd
    CAPTURE $NSCERT gencert -t ${CERT_PREFIX}snmptrapd $ca --cn snmptrapd_$HOSTNAME_SHORT $NSCERTARGS
    TRAPDFP=`$NSCERT showcerts --fingerprint --brief ${CERT_PREFIX}snmptrapd  $NSCERTARGS`
    CHECKVALUEISNT "$TRAPDFP" "" "generated fingerprint for snmptrapd certificate"

    # snmpd
    CAPTURE $NSCERT gencert -t ${CERT_PREFIX}snmpd $ca --cn snmpd_$HOSTNAME_SHORT $NSCERTARGS
    SERVERFP=`$NSCERT showcerts --fingerprint --brief ${CERT_PREFIX}snmpd  $NSCERTARGS`
    CHECKVALUEISNT "$SERVERFP" "" "generated fingerprint for snmpd certificate"

    # user
    CAPTURE $NSCERT gencert -t ${CERT_PREFIX}snmpapp $ca --cn 'testuser'  $NSCERTARGS
    TESTUSERFP=`$NSCERT showcerts --fingerprint --brief ${CERT_PREFIX}snmpapp $NSCERTARGS`
    CHECKVALUEISNT "$TESTUSERFP" "" "generated fingerprint for testuser certificate"
}

configagent () {
    local trapdhost=${SNMP_TRANSPORT_SPEC}:${SNMP_TEST_DEST}${SNMP_SNMPTRAPD_PORT}

    if [ $SNMP_VERBOSE -gt 0 ]; then
	CONFIGAGENT "## ca=$CAFP"
	CONFIGAGENT "## snmpapp=$TESTUSERFP"
	CONFIGAGENT "## snmpd=$SERVERFP"
	CONFIGAGENT "## snmptrapd=$TRAPDFP"
	CONFIGAGENT "\n"
	CONFIGAGENT "[snmp] logTimestamp 1"
    fi

    if [ "$DEFAULT"  != "no" ]; then
	CONFIGAGENT '## using default for localCert=snmpd'
    else
	CONFIGAGENT '[snmp]' localCert $SERVERFP
    fi
    [ "$TLSTYPE"   = "peer"  ] && CONFIGAGENT '[snmp]' peerCert $TRAPDFP
    [ "$TLSTYPE"   = "trust" ] && CONFIGAGENT '[snmp]' trustCert $CAFP
    CONFIGAGENT certSecName 9 $TESTUSERFP --cn
    CONFIGAGENT rwuser -s tsm testuser

    [ "$INFORM" = "yes" ] && [ "$TLSTYPE" = "peer"  ] && CONFIGAGENT trapsess -Ci -T localCert=$SERVERFP -T peerCert=$TRAPDFP $trapdhost
    [ "$TRAP"   = "yes" ] && [ "$TLSTYPE" = "peer"  ] && CONFIGAGENT trapsess     -T localCert=$SERVERFP -T peerCert=$TRAPDFP $trapdhost
    [ "$INFORM" = "yes" ] && [ "$TLSTYPE" = "trust" ] && CONFIGAGENT trapsess -Ci -T their_hostname=$THEIR_HOSTNAME -T localCert=$SERVERFP -T trustCert=$CAFP $trapdhost
    [ "$TRAP"   = "yes" ] && [ "$TLSTYPE" = "trust" ] && CONFIGAGENT trapsess     -T their_hostname=$THEIR_HOSTNAME -T localCert=$SERVERFP -T trustCert=$CAFP $trapdhost
    [ "$INFORM_DEFAULT" = "yes" ] && CONFIGAGENT trapsess -Ci -T their_hostname=$THEIR_HOSTNAME $trapdhost
    [ "$TRAP_DEFAULT"   = "yes" ] && CONFIGAGENT trapsess     -T their_hostname=$THEIR_HOSTNAME $trapdhost
}

configtrapd () {
    if [ $SNMP_VERBOSE -gt 0 ]; then
	CONFIGTRAPD "## ca=$CAFP"
	CONFIGTRAPD "## snmpapp=$TESTUSERFP"
	CONFIGTRAPD "## snmpd=$SERVERFP"
	CONFIGTRAPD "## snmptrapd=$TRAPDFP"
	CONFIGTRAPD "\n"
	CONFIGTRAPD "[snmp] logTimestamp 1"
    fi
    if [ "$DEFAULT"  != "no" ]; then
	CONFIGTRAPD '## using default for localCert=snmptrapd'
    else
	CONFIGTRAPD '[snmp]' localCert $TRAPDFP
    fi
    CONFIGTRAPD certSecName 10 $SERVERFP --cn
    CONFIGTRAPD authuser log -s tsm snmpd_$HOSTNAME_SHORT authpriv
}

configapp () {
    if [ $SNMP_VERBOSE -gt 0 ]; then
	CONFIGAPP "## ca=$CAFP"
	CONFIGAPP "## snmpapp=$TESTUSERFP"
	CONFIGAPP "## snmpd=$SERVERFP"
	CONFIGAPP "## snmptrapd=$TRAPDFP"
	CONFIGAPP "\n"
	CONFIGAPP "logTimestamp 1"
    fi
    CONFIGAPP "## snmp.conf"
}

#
# Begin test
#
[ "$USE_CA" = "yes" ] && createca
createcerts
configagent
configtrapd
configapp

traps=0
if [ "$THEIR_HOSTNAME" != "faulty" ] || [ "$TLSTYPE" = "peer" ]; then
    [ "$INFORM" = "yes" ] && traps=$((traps+1))
    [ "$TRAP"   = "yes" ] && traps=$((traps+1))
    [ "$INFORM_DEFAULT" = "yes" ] && traps=$((traps+1))
    [ "$TRAP_DEFAULT"   = "yes" ] && traps=$((traps+1))
    TRAPS=$(($traps*$NO_OF_TRAPS))
fi

#TRAPD_FLAGS="$TRAPD_FLAGS -DALL"
STARTTRAPD

# initialize only the example mib, and not the notification mib stuff
AGENT_FLAGS="$AGENT_FLAGS -Dexample,header_generic"
STARTAGENT

DELAY

SNMP_FLAGS="-d -v3 -t 3 -r 0 $SNMP_FLAGS"
SNMPDHOST=$SNMP_TRANSPORT_SPEC:$SNMP_TEST_DEST$SNMP_SNMPD_PORT
OID=".1.3.6.1.4.1.2021.254.8.0"
if [ "$TLSTYPE" = "trust" ]; then
    SNMPSET="snmpset $SNMP_FLAGS -T localCert=${CERT_PREFIX}snmpapp -T their_hostname=$THEIR_HOSTNAME -T trustCert=$CAFP -On $SNMPDHOST $OID i 1"
else
    SNMPSET="snmpset $SNMP_FLAGS -T localCert=${CERT_PREFIX}snmpapp -T peerCert=${CERT_PREFIX}snmpd -On $SNMPDHOST $OID i 1"
fi

for i in `seq 1 $NO_OF_TRAPS`; do
    CAPTURE $SNMPSET
    DELAY
done

CHECKTRAPDCOUNT $traps "coldStart"
CHECKTRAPDCOUNT $TRAPS "life the universe and everything"

STOPAGENT
STOPTRAPD

FINISHED
